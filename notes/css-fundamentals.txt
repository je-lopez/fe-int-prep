Basic Terminology Review:
- declaration: made up of a property and a value, ex: color: black
- declaration block: a group of declarations inside curly braces, preceeded by a selector. ex:
      body {
        color: black;
        font-family: Helvetica;
      }
- ruleset: a selector and declaration block
- cascaded value: a value for a particular property applied to an element as a result of the cascade
- computed value: values declared using relative units are evaluated by the browser to an absolute unit
- CSS variables are sometimes referred to as custom properties and start with --

Box Model & 'border-box' Sizing

- box model refers to the composition of elements on a page
  - when you specify height/width, you're setting content size (first/inner-most "layer" of box model)
  - padding, border, and margin will be added to specified height/width

- applying "box-sizing: border-box" to an element changes the box model
  - when you specify height/width, it applies to the entire element, including padding, border, and margin

Cascade
- the cascade is the name for the set of rules that determines how conflicts are resolved
- the cascade unpacked:
  1. stylesheet origin: where styles come from. styles are applied in conjuction with the browser's default styles
    - stylesheets you add aren't the only ones applied. there are types, or origins, of stylesheets
      1. author styles: the ones you write
      2. user agent styles: the browser's defaults (have lower priority).. ex: h1-h6, and p tags get margin top/bottom
  2. selector specificity: which selectors take precedence over which
    - if conflicting declarations can't be resolved bsed on their origin, the browser then tries to resolve them by looking at their specificity
    - specificity is evaluated by the browser in two parts:
      1. styles applied inline
        - effectively scoped declarations, which override any applied in stylesheets
      2. styles applied using a selector
    - the rules:
      1. if a selector has more IDs, it wins
      2. if that results in a tie, the selector with the most classes wins
      3. if that results in a tie, the selector with the most tag names wins
  3. source order: order in which styles are declared in the stylesheet
- resolving conflicts:

              yes                                     no                              no                                               no
 (conflict?) ----> (different origin or importance?) ----> (is one an inline scope?) ----> (do selectors have different specificity?) ----> use last declaration
                               |                                     |                                         |
                               | yes                                 | yes                                     | yes
                               |                                     |                                         |
       use declaration with higher priority origin          use inline declaration            use declaration with high specificity

Two Rules of Thumb:
1. don't use IDs in your selector. when you need to override the selector, you often don't have another meaningful ID, so you end up adding classes
2. don't use !important. this is even more difficult to override than ID

Inheritance & inherit keyword
- the last way an element can receive a style. if an element has no cascaded value for a given property, it may inherit one from an ancestor element
- if you want inheritance to take place but a cascaded value is preventing it, use the inherit keyword
- the inherit keyword can be used to force inheritance of a property not normally inherited

initial keyword
- isn't supported in any version of IE or Opera Mini
- aka default value. use keyword to reset value of property
- the same can sometimes be achieved with the value auto. auto isn't the default value for all properties, sometimes not even valid

- shorthand properties can sometimes override styles, and usually isn't obvious
- shorthands include ones that use TRouBLe (top, right, bottom, left), ex: margin, padding

key points so far:
- keep selector specificity under control
- don't confuse cascade with inheritance
- certain properties are inherited, including those for texts, lists, and table borders
- don't confuse initial and auto values
- stay out TRouBLe with shorthand properties (LoVe HAte)

-------

Relative Units
- the most familiar unit is px, which is an absolute (not relative) unit
- em and rem are relative units, meaning that the value changes based on external factors
- CSS brings a late-binding of styles: content and styles aren't pulled together until after the authoring of both is complete

ems
- em, the most common relative unit, is a measure used in typography, referring to a specified font size
  - 1 em means the font size of the current element; the exact value varies depending ont he element you're applying it to
    - ex: a div with 16px font size and padding of 1 em would result in the padding also being 16px
  - convenient when setting properties like padding, height, width, or border-radius, because these will scale evenly with the element if it inherits different font sizes'
    - this is a powerful feature. you're able to define the size of an element, then scale the entire thing up or down with a single declaration that changes font size
  - when used with font-size, as in "font-size: 1.2em;", the calculation is based on the inherited font size: desired size / inherited size = desired size in em
  - shrinking text can occur when you nest lists several levels deep and apply an em-based font size to each level. stick with rems for font size

rems
- rem, short for root em, is sized relative to the root element vs the current element like em
- no matter where you specify something like "font-size: 1.2rem", it'll compute to the same value
- you can specify the root font size using the pseudo-class :root (document class). set it using em, then children elements with rem to make it relative to the set value
- tip: when in doubt, use rems for font size, px for borders, an ems for most others

- when you use a unitless number, that declared value is inherited, meaning its computed value is recalculated for each inheriting child element

extra:
- to set a variable: :root { --main-font: Helvetica, Arial, sans-serif; }
- to use a variable: p { font-family: var(--main-font) }
- for up-to-date support information on less-known browsers, check "Can I Use" at http://caniuse.com/
- use Autoprefixer to parse CSS and output a new file with all the relevant prefixes added and  where necessary

Responsive
- using calc() for font size
  - use it to define font-size in ems and vh units
  - doing so will make the font scale smoothly, unlike breakpoints
  - typically add to root like, :root { font-size: calc(0.5em + 1vh) } ===> give you base font of 11.75px on iphone 6 and 20px on 1200px browser windows

Accessibility
- use relative units or percentages for font sizes. placement of a default font size is harder and depending on which level, it can be permanent. helps with those who are vision-impaired

key points so far:
- embrace the use of relative units, allowing the page's structure to determine the meaning of your styles
- use rems for font size, but selective use ems for simple scaling of components
- you can make your entire page scale responsively without any media queries
- use unitless values when specifying line height

// todo: add intro to layout --using floats etc

Flexbox
- turn an element into a flex container by setting "display: flex"
- by default, the items align in a row, so from left to right
- the container fills the width like a block element, but the items not necessarily
- flex is a shorthand for flex-grow, flex-shrink, and flex-basis. defualt value for shrink is 1 and basis is 0%
  - flex-basis: defines a sort of starting point for the size of an element -an initial "main size"
- TODO: add remaining

key points so far:
- use flexbox for versatile, easy-to-control layout of page content
- Autoprefixer can simplify flexbox support for older browsers
- use flex to specify almost any imaginable combination of flex item sizes
- use nested flexboxes to piece together more complicated layouts adn to fill the heights of naturally sized boxes
- flexbox automatically creates columns of equal height
- use align-items or align-self to vertically center a flex item inside its flex container

Grid Layout Module
- the CSS grid lets you define a two-dimensional layout of columns and rows, and then place elements within the grid
